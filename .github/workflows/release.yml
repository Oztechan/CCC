name: Deployment

on:
  push:
    branches:
      - master

env:
  ANDROID_RELEASE_ADMOB_APP_ID: ${{ secrets.ANDROID_RELEASE_ADMOB_APP_ID }}
  ANDROID_RELEASE_BANNER_AD_UNIT_ID_CALCULATOR: ${{ secrets.ANDROID_RELEASE_BANNER_AD_UNIT_ID_CALCULATOR }}
  ANDROID_RELEASE_BANNER_AD_UNIT_ID_SETTINGS: ${{ secrets.ANDROID_RELEASE_BANNER_AD_UNIT_ID_SETTINGS }}
  ANDROID_RELEASE_BANNER_AD_UNIT_ID_CURRENCIES: ${{ secrets.ANDROID_RELEASE_BANNER_AD_UNIT_ID_CURRENCIES }}
  ANDROID_RELEASE_INTERSTITIAL_AD_ID: ${{ secrets.ANDROID_RELEASE_INTERSTITIAL_AD_ID }}
  ANDROID_RELEASE_REWARDED_AD_UNIT_ID: ${{ secrets.ANDROID_RELEASE_REWARDED_AD_UNIT_ID }}
  ANDROID_DEBUG_ADMOB_APP_ID: ${{ secrets.ANDROID_DEBUG_ADMOB_APP_ID }}
  ANDROID_DEBUG_BANNER_AD_UNIT_ID_CALCULATOR: ${{ secrets.ANDROID_DEBUG_BANNER_AD_UNIT_ID_CALCULATOR }}
  ANDROID_DEBUG_BANNER_AD_UNIT_ID_SETTINGS: ${{ secrets.ANDROID_DEBUG_BANNER_AD_UNIT_ID_SETTINGS }}
  ANDROID_DEBUG_BANNER_AD_UNIT_ID_CURRENCIES: ${{ secrets.ANDROID_DEBUG_BANNER_AD_UNIT_ID_CURRENCIES }}
  ANDROID_DEBUG_INTERSTITIAL_AD_ID: ${{ secrets.ANDROID_DEBUG_INTERSTITIAL_AD_ID }}
  ANDROID_DEBUG_REWARDED_AD_UNIT_ID: ${{ secrets.ANDROID_DEBUG_REWARDED_AD_UNIT_ID }}
  ANDROID_KEY_STORE_PATH: ${{ secrets.ANDROID_KEY_STORE_PATH }}
  ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
  ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
  ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
  BASE_URL_BACKEND: ${{ secrets.BASE_URL_BACKEND }}
  BASE_URL_API: ${{ secrets.BASE_URL_API }}
  BASE_URL_API_PREMIUM: ${{ secrets.BASE_URL_API_PREMIUM }}
  API_KEY_PREMIUM: ${{ secrets.API_KEY_PREMIUM }}
  CI: true

jobs:

  GenerateGradleArtifacts:
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.status.outputs.status }}
    steps:

      - name: Clone Repo
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Adding secret files
        run: |
          echo "${{ secrets.ANDROID_GPG_RELEASE_KEYSTORE }}" > release.keystore.asc
          gpg -d --passphrase "${{ secrets.SECRET_PASSWORD }}" --batch release.keystore.asc > android/release.keystore
          mkdir android/src/release
          echo "${{ secrets.RELEASE_GOOGLE_SERVICES_JSON_ASC }}" > google-services.json.asc
          gpg -d --passphrase "${{ secrets.SECRET_PASSWORD }}" --batch google-services.json.asc > android/src/release/google-services.json
          mkdir android/src/debug
          echo "${{ secrets.DEBUG_GOOGLE_SERVICES_JSON_ASC }}" > google-services.json.asc
          gpg -d --passphrase "${{ secrets.SECRET_PASSWORD }}" --batch google-services.json.asc > android/src/debug/google-services.json
          echo "${{ secrets.AG_CONNECT_SERVICES_JSON_ASC }}" > agconnect-services.json.asc
          gpg -d --passphrase "${{ secrets.SECRET_PASSWORD }}" --batch agconnect-services.json.asc > android/src/release/agconnect-services.json

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Gradle Build
        run: ./gradlew :android:bundleRelease :backend:fatJar --parallel

      - name: Upload Google App Bundle
        uses: actions/upload-artifact@v3
        with:
          name: googleBundle
          path: android/build/outputs/bundle/googleRelease/android-google-release.aab

      - name: Upload Huawei App Bundle
        uses: actions/upload-artifact@v3
        with:
          name: huaweiBundle
          path: android/build/outputs/bundle/huaweiRelease/android-huawei-release.aab

      - name: Upload Backend Jar
        uses: actions/upload-artifact@v3
        with:
          name: backendJar
          path: backend/build/libs/backend-fat-*.jar

      - name: Set Job Status
        id: status
        run: echo "::set-output name=status::success"

  UploadGooglePlay:
    runs-on: ubuntu-latest
    needs: [ GenerateGradleArtifacts ]
    outputs:
      status: ${{ steps.status.outputs.status }}
    steps:

      - name: Download App Bundle
        uses: actions/download-artifact@v3
        with:
          name: googleBundle

      - name: Adding secret files
        run: |
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" > service_account.json.asc
          gpg -d --passphrase "${{ secrets.SECRET_PASSWORD }}" --batch service_account.json.asc > service_account.json

      - name: Upload Artifact to Google Play Console
        uses: r0adkll/upload-google-play@v1.0.18
        with:
          serviceAccountJson: service_account.json
          packageName: mustafaozhan.github.com.mycurrencies
          releaseFiles: android-google-release.aab
          track: internal

      - name: Delete App Bundle
        uses: geekyeggo/delete-artifact@v2
        with:
          name: googleBundle

      - name: Set Job Status
        id: status
        run: echo "::set-output name=status::success"

  UploadHuaweiAppGallery:
    runs-on: ubuntu-latest
    needs: [ GenerateGradleArtifacts ]
    outputs:
      status: ${{ steps.status.outputs.status }}
    steps:

      - name: Download App Bundle
        uses: actions/download-artifact@v3
        with:
          name: huaweiBundle

      - name: Deploy to Huawei App Gallery
        uses: muhamedzeema/appgallery-deply-action@main
        with:
          client-id: ${{secrets.HUAWEI_CLIENT_ID}}
          client-key: ${{secrets.HUAWEI_CLIENT_KEY}}
          app-id: ${{secrets.HUAWEI_APP_ID}}
          file-extension: "aab"
          file-path: "android-huawei-release.aab"
          file-name: "android-huawei-release"

      - name: Delete App Bundle
        uses: geekyeggo/delete-artifact@v2
        with:
          name: huaweiBundle

      - name: Set Job Status
        id: status
        run: echo "::set-output name=status::success"

  ServerDeployment:
    runs-on: ubuntu-latest
    needs: [ GenerateGradleArtifacts ]
    outputs:
      status: ${{ steps.status.outputs.status }}
    steps:

      - name: Download Backend Jar
        uses: actions/download-artifact@v3
        with:
          name: backendJar
          path: artifact

      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET }}
          SOURCE: "artifact/"

      - name: Delete Backend Jar
        uses: geekyeggo/delete-artifact@v2
        with:
          name: backendJar

      - name: Set Job Status
        id: status
        run: echo "::set-output name=status::success"

  PublishAppStore:
    runs-on: macos-12
    outputs:
      status: ${{ steps.status.outputs.status }}
    steps:
      - name: Clone Repo
        uses: actions/checkout@v3
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Adding secret files
        run: |
          echo "${{ secrets.IOS_GPG_FIREBASE_CONFIG }}" > GoogleService-Info.plist.asc
          mkdir ios/CCC/Resources/Release
          gpg -d --passphrase "${{ secrets.SECRET_PASSWORD }}" --batch GoogleService-Info.plist.asc > ios/CCC/Resources/Release/GoogleService-Info.plist
          rm ios/CCC/Resources/Debug/GoogleService-Info.plist
          echo "${{ secrets.IOS_GPG_RELEASE_XCCONFIG }}" > Release.xcconfig.asc
          gpg -d --passphrase "${{ secrets.SECRET_PASSWORD }}" --batch Release.xcconfig.asc > ios/CCC/Resources/Release/Config.xcconfig

      - name: Install Cocoapods
        run: |
          ./gradlew provider:podGenIOS res:podGenIOS --parallel
          cd ios/CCC
          pod install --repo-update

      - name: Publish
        uses: maierj/fastlane-action@v2.3.0
        with:
          lane: 'publish'
          subdirectory: 'ios'
        env:
          APP_STORE_CONNECT_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_ISSUER_ID }}
          APP_STORE_CONNECT_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_KEY_CONTENT }}
          APP_STORE_CONNECT_KEY_ID: ${{ secrets.APP_STORE_CONNECT_KEY_ID }}
          IOS_GOOGLE_FIREBASE_APP_ID: ${{ secrets.IOS_GOOGLE_FIREBASE_APP_ID }}
          FIREBASE_CLI_TOKEN: ${{ secrets.FIREBASE_CLI_TOKEN }}
          GIT_AUTHORIZATION: ${{ secrets.GIT_AUTHORIZATION }}
          SECRET_PASSWORD: ${{ secrets.SECRET_PASSWORD }}
          MATCH_PASSWORD: ${{ secrets.SECRET_PASSWORD }}
          FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT: 5
          FASTLANE_XCODEBUILD_SETTINGS_RETRIES: 5

      - name: Set Job Status
        id: status
        run: echo "::set-output name=status::success"

  Notify:
    runs-on: ubuntu-latest
    needs: [ GenerateGradleArtifacts, UploadGooglePlay, UploadHuaweiAppGallery, ServerDeployment, PublishAppStore ]
    if: always()
    steps:

      - name: Notify slack success
        if: needs.GenerateGradleArtifacts.outputs.status == 'success' &&
          needs.UploadGooglePlay.outputs.status == 'success' &&
          needs.UploadHuaweiAppGallery.outputs.status == 'success' &&
          needs.ServerDeployment.outputs.status == 'success' &&
          needs.PublishAppStore.outputs.status == 'success'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v2
        with:
          channel: ccc-github
          status: SUCCESS
          color: good

      - name: Notify slack fail
        if: false == (needs.GenerateGradleArtifacts.outputs.status == 'success') ||
          false == (needs.UploadGooglePlay.outputs.status == 'success') ||
          false == (needs.UploadHuaweiAppGallery.outputs.status == 'success') ||
          false == (needs.ServerDeployment.outputs.status == 'success') ||
          false == (needs.PublishAppStore.outputs.status == 'success')
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v2
        with:
          channel: ccc-github
          status: FAILED
          color: danger
