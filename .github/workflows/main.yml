name: CCC CI

on:
  push:
    branches:
      - develop
  pull_request:

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

env:
  ANDROID_RELEASE_ADMOB_APP_ID: ${{ secrets.ANDROID_RELEASE_ADMOB_APP_ID }}
  ANDROID_RELEASE_BANNER_AD_UNIT_ID_CALCULATOR: ${{ secrets.ANDROID_RELEASE_BANNER_AD_UNIT_ID_CALCULATOR }}
  ANDROID_RELEASE_BANNER_AD_UNIT_ID_SETTINGS: ${{ secrets.ANDROID_RELEASE_BANNER_AD_UNIT_ID_SETTINGS }}
  ANDROID_RELEASE_BANNER_AD_UNIT_ID_CURRENCIES: ${{ secrets.ANDROID_RELEASE_BANNER_AD_UNIT_ID_CURRENCIES }}
  ANDROID_RELEASE_INTERSTITIAL_AD_ID: ${{ secrets.ANDROID_RELEASE_INTERSTITIAL_AD_ID }}
  ANDROID_RELEASE_REWARDED_AD_UNIT_ID: ${{ secrets.ANDROID_RELEASE_REWARDED_AD_UNIT_ID }}
  ANDROID_DEBUG_ADMOB_APP_ID: ${{ secrets.ANDROID_DEBUG_ADMOB_APP_ID }}
  ANDROID_DEBUG_BANNER_AD_UNIT_ID_CALCULATOR: ${{ secrets.ANDROID_DEBUG_BANNER_AD_UNIT_ID_CALCULATOR }}
  ANDROID_DEBUG_BANNER_AD_UNIT_ID_SETTINGS: ${{ secrets.ANDROID_DEBUG_BANNER_AD_UNIT_ID_SETTINGS }}
  ANDROID_DEBUG_BANNER_AD_UNIT_ID_CURRENCIES: ${{ secrets.ANDROID_DEBUG_BANNER_AD_UNIT_ID_CURRENCIES }}
  ANDROID_DEBUG_INTERSTITIAL_AD_ID: ${{ secrets.ANDROID_DEBUG_INTERSTITIAL_AD_ID }}
  ANDROID_DEBUG_REWARDED_AD_UNIT_ID: ${{ secrets.ANDROID_DEBUG_REWARDED_AD_UNIT_ID }}
  ANDROID_KEY_STORE_PATH: ${{ secrets.ANDROID_KEY_STORE_PATH }}
  ANDROID_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
  ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
  ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
  BASE_URL_BACKEND: ${{ secrets.BASE_URL_BACKEND }}
  BASE_URL_API: ${{ secrets.BASE_URL_API }}
  BASE_URL_API_PREMIUM: ${{ secrets.BASE_URL_API_PREMIUM }}
  API_KEY_PREMIUM: ${{ secrets.API_KEY_PREMIUM }}

jobs:

  GradleBuild:
    runs-on: macos-latest
    outputs:
      status: ${{ steps.status.outputs.status }}
    steps:

      - name: Clone Repo
        uses: actions/checkout@v2

      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Adding secret files
        run: |
          echo "${{ secrets.ANDROID_GPG_RELEASE_KEYSTORE }}" > release.keystore.asc
          gpg -d --passphrase "${{ secrets.GPG_PASSWORD }}" --batch release.keystore.asc > android/release.keystore
          mkdir android/src/release
          echo "${{ secrets.ANDROID_GPG_FIREBASE_CONFIG }}" > google-services.json.asc
          gpg -d --passphrase "${{ secrets.GPG_PASSWORD }}" --batch google-services.json.asc > android/src/release/google-services.json
          echo "${{ secrets.IOS_GPG_FIREBASE_CONFIG }}" > GoogleService-Info.plist.asc
          gpg -d --passphrase "${{ secrets.GPG_PASSWORD }}" --batch GoogleService-Info.plist.asc > ios/CCC/Resources/GoogleService-Info.plist
          echo "${{ secrets.IOS_GPG_RELEASE_XCCONFIG }}" > Release.xcconfig.asc
          gpg -d --passphrase "${{ secrets.GPG_PASSWORD }}" --batch Release.xcconfig.asc > ios/CCC/Resources/Release.xcconfig

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Gradle Build
        run: ./gradlew build --parallel

      - name: Upload to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ad/build/reports/kover/report.xml,analytics/build/reports/kover/report.xml,config/build/reports/kover/report.xml,android/build/reports/kover/report.xml,backend/build/reports/kover/report.xml,basemob/basemob/build/reports/kover/report.xml,billing/build/reports/kover/report.xml,client/build/reports/kover/report.xml,common/build/reports/kover/report.xml,logmob/logmob/build/reports/kover/report.xml,parsermob/parsermob/build/reports/kover/report.xml,scopemob/scopemob/build/reports/kover/report.xml

      - name: Upload to Codacy
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: ad/build/reports/kover/report.xml,analytics/build/reports/kover/report.xml,config/build/reports/kover/report.xml,android/build/reports/kover/report.xml,backend/build/reports/kover/report.xml,basemob/basemob/build/reports/kover/report.xml,billing/build/reports/kover/report.xml,client/build/reports/kover/report.xml,common/build/reports/kover/report.xml,logmob/logmob/build/reports/kover/report.xml,parsermob/parsermob/build/reports/kover/report.xml,scopemob/scopemob/build/reports/kover/report.xml

      - name: Set Job Status
        id: status
        run: echo "::set-output name=status::success"

  XCodeBuild:
    runs-on: macos-latest
    outputs:
      status: ${{ steps.status.outputs.status }}
    steps:

      - name: Clone Repo
        uses: actions/checkout@v2

      - name: Checkout submodules
        run: git submodule update --init --recursive

      - name: Adding secret files
        run: |
          echo "${{ secrets.ANDROID_GPG_RELEASE_KEYSTORE }}" > release.keystore.asc
          gpg -d --passphrase "${{ secrets.GPG_PASSWORD }}" --batch release.keystore.asc > android/release.keystore
          mkdir android/src/release
          echo "${{ secrets.ANDROID_GPG_FIREBASE_CONFIG }}" > google-services.json.asc
          gpg -d --passphrase "${{ secrets.GPG_PASSWORD }}" --batch google-services.json.asc > android/src/release/google-services.json
          echo "${{ secrets.IOS_GPG_FIREBASE_CONFIG }}" > GoogleService-Info.plist.asc
          gpg -d --passphrase "${{ secrets.GPG_PASSWORD }}" --batch GoogleService-Info.plist.asc > ios/CCC/Resources/GoogleService-Info.plist
          echo "${{ secrets.IOS_GPG_RELEASE_XCCONFIG }}" > Release.xcconfig.asc
          gpg -d --passphrase "${{ secrets.GPG_PASSWORD }}" --batch Release.xcconfig.asc > ios/CCC/Resources/Release.xcconfig

      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 11

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: Install Cocoapods
        run: |
          ./gradlew client:podGenIOS
          cd ios/CCC
          pod install

      - name: Xcode build
        run: cd ios &&
          xcrun xcodebuild
          -workspace CCC.xcworkspace
          -scheme CCC
          -sdk iphoneos
          -derivedDataPath
          build
          CODE_SIGN_IDENTITY=""
          CODE_SIGNING_REQUIRED="NO"
          CODE_SIGN_ENTITLEMENTS=""
          CODE_SIGNING_ALLOWED="NO"

      - name: Set Job Status
        id: status
        run: echo "::set-output name=status::success"

  Notify:
    runs-on: ubuntu-latest
    needs: [ GradleBuild, XCodeBuild ]
    if: always()
    steps:

      - name: Notify slack fail
        if: false == (needs.GradleBuild.outputs.status == 'success') || false == (needs.XCodeBuild.outputs.status == 'success')
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
        uses: voxmedia/github-action-slack-notify-build@v1
        with:
          channel: ccc
          status: FAILED
          color: danger
